library(shiny)
help(tabsetPanel)
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
h3()
paste(h3(), actionButton("hi", "ho"))
runApp('BootstrapVis')
help(renderUI)
help(renderHTML)
runApp('BootstrapVis')
runApp('BootstrapVis')
shiny::runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
help(replicate)
data.frame(replicate(n = 10, rnorm(input$SampSize1, mean = input$Parameter11, sd = sqrt(input$Parameter12))))
runApp('BootstrapVis')
help("data.frame")
data.frame
data.frame()
runApp('BootstrapVis')
runApp('BootstrapVis')
c()
a <- c()
a[1] <- 3
a
data.frame(replicate(10, rnorm(20, 0, 1)))
data.frame(replicate(10, rnorm(20, 0, 1)))->a
a
MASS::fitdistr(a[,1], densfun = "norm")
library(MASS)
help(fitdistr)
apply(a, MARGIN = 2, FUN = fitdistr, densfun = "normal")
unlist(apply(a, MARGIN = 2, FUN = fitdistr, densfun = "normal"))
apply(a, MARGIN = 2, FUN = fitdistr, densfun = "normal")->res
res
str(res)
lapply(res, FUN = function(x){x$estimate})
sapply(res, FUN = function(x){x$estimate})
runApp('BootstrapVis')
1/sqrt(20)
runApp('BootstrapVis')
help(tableOutput)
help(renderTable)
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
rbinom(1, size = 20, prob = 0.5)
replicate(1000, rbinom(1, size = 20, prob = 0.5))
runApp('BootstrapVis')
rcauchy()
rcauchy
help(rweibull)
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
help(Gamma)
Ga
Gam
runApp('BootstrapVis')
shape<-1
scale <- 1
scale*gamma(1+1/shape)
4*sqrt(scale^2*(gamma(1+2/shape)-(gamma(1+1/shape))^2))
scale*gamma(1+1/shape)+4*sqrt(scale^2*(gamma(1+2/shape)-(gamma(1+1/shape))^2))
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
help(text)
runApp('BootstrapVis')
h <- hist(rnorm(100))
h
runApp('BootstrapVis')
help(renderTable)
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
a <- rnorm(25)
sample(a, size = 25, replace = TRUE)
replicate(1000, sample(a, size = 25, replace = TRUE))
replicate(100, sample(a, size = 25, replace = TRUE))
data.frame(replicate(100, sample(a, size = 25, replace = TRUE)))
replicate(100, sample(a, size = 25, replace = TRUE))->temp
temp
apply(temp, MARGIN = 2, FUN = fitdistr, densfun = "normal")
data.frame(replicate(100, sample(a, size = 25, replace = TRUE)))->temp
temp
apply(temp, MARGIN = 2, FUN = fitdistr, densfun = "normal")
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
v$createSamples
shiny::runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
temp
rnorm(20, 0, 1)->temp
temp2 <- fitdistr(temp, densfun = "normal")
temps
temp2
as.data.frametemp2)
as.data.frame(temp2)
str(temp2)
temp2$estimate
temp2$sd
temp2 <- fitdistr(temp, densfun = "gamma")
rgamma(20, 1, 1)->temp
temp2 <- fitdistr(temp, densfun = "gamma")
temp2
temp2 <- fitdistr(temp, densfun = "weibull")
temp2
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
temp2
temp2$sd
a <- c(1,2)
b <- c(10, 20)
c <- c(5, 1)
data.frame(a,b,c)
t(data.frame(a,b,c))
runApp('BootstrapVis')
runApp()
runApp('BootstrapVis')
runApp('BootstrapVis')
runApp('BootstrapVis')
bootSamples$MLEs
bootSamples$MLEs[1,]
str(bootSamples$MLEs)
percentile <- quantile(bootSamples$MLEs[1,], c(0.025, 0.975))
mle <- singleSample$MLEs$estimate[1]
mleSE <- singleSample$MLEs$sd[1]
reflected <- c(mle-(quantile(bootSamples$MLEs[1,],0.975)-mle), mle-(quantile(bootSamples$MLEs[1,],0.025)-mle))
mleInterval <- c(mle-1.96*mleSE, mle+1.96*mleSE)
percentile
reflected
mleInterval
t(data.frame(percentile = percentile, reflected = reflected, mleInterval = mleInterval, row.names = c("Lower", "Upper")))
temp <- t(data.frame(percentile = percentile, reflected = reflected, mleInterval = mleInterval, row.names = c("Lower", "Upper")))
row.names(temp) <- c("95% percentile interval", "95% refelected percentile interval", "95% large-sample interval using MLE")
temp
runApp()
runApp('BootstrapVis')
